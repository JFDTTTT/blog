(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{364:function(t,a,s){"use strict";s.r(a);var e=s(45),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"回溯原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#回溯原理"}},[t._v("#")]),t._v(" 回溯原理")]),t._v(" "),s("blockquote",[s("p",[t._v("回溯法也称试探法，它的基本思想是:从问题的某一种状态(初始状态)出发，搜索从这种状态出发 所能达到的所有“状\n态”，当一条路走到“尽头”的时候(不能再前进)，再后退一步或若干步，从 另一种可能“状态”出发，继续搜索，直到所\n有的“路径”(状态)都试探过。这种不断“前进”、 不断“回溯”寻找解的方法，就称作“回溯法”。"),s("br"),t._v("\n-- 百度百科")])]),t._v(" "),s("h2",{attrs:{id:"没有回溯的匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#没有回溯的匹配"}},[t._v("#")]),t._v(" 没有回溯的匹配")]),t._v(" "),s("p",[t._v("正则是："),s("code",[t._v("/ab{1,3}c/")]),t._v(", 匹配的字符串 "),s("code",[t._v("abbbc")])]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/WX20210609-115911@2x.png")}}),t._v(" "),s("h2",{attrs:{id:"有回溯的匹配"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#有回溯的匹配"}},[t._v("#")]),t._v(" 有回溯的匹配")]),t._v(" "),s("p",[t._v('如果目标字符串是"abbc"，中间就有回溯。')]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/WX20210609-140818@2x.png")}}),t._v(" "),s("p",[t._v('图中第 5 步有红颜色，表示匹配不成功。此时 b{1,3} 已经匹配到了 2 个字符 "b"，准备尝试第三个时， 结果发现接下来的字符是 "c"。那么就认为 b{1,3} 就已经匹配完毕。然后状态又回到之前的状态(即\n第 6 步与第 4 步一样)，最后再用子表达式 c，去匹配字符 "c"。当然，此时整个表达式匹配成功了。')]),t._v(" "),s("p",[t._v("如果对此没有感觉，我们再举一个例子：正则是："),s("code",[t._v("/ab{1,3}bbc/")]),t._v(", 匹配的字符串 "),s("code",[t._v("abbbc")])]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/WX20210609-141232@2x.png")}}),t._v(" "),s("p",[t._v('其中第 7 步和第 10 步是回溯。第 7 步与第 4 步一样，此时 b{1,3} 匹配了两个 "b"，而第 10 步与 第 3 步一样，此时 b{1,3} 只匹配了一个 "b"，这也是 b{1,3} 的最终匹配结果。')]),t._v(" "),s("p",[t._v("再看一个清晰的回溯，正则是：正则是："),s("code",[t._v("/”.*“/")]),t._v(", 匹配的字符串 "),s("code",[t._v('"abc"de')])]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/WX20210609-141552@2x.png")}}),t._v(" "),s("p",[t._v("图中省略了尝试匹配双引号失败的过程。可以看出 "),s("code",[t._v(".*")]),t._v(" 是非常影响效率的。 为了减少一些不必要的回溯，可以把正则修改为 "),s("code",[t._v('/"[^"]*"/')]),t._v("。")]),t._v(" "),s("h2",{attrs:{id:"常见的回溯形式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见的回溯形式"}},[t._v("#")]),t._v(" 常见的回溯形式")]),t._v(" "),s("h3",{attrs:{id:"贪婪量词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪婪量词"}},[t._v("#")]),t._v(" 贪婪量词")]),t._v(" "),s("p",[t._v('之前的例子都是贪婪量词相关的。比如 b{1,3}，因为其是贪婪的，尝试可能的顺序是从多往少的方向去尝 试。首先会尝试 "bbb"，然后再看整个正则是否能匹配。不能匹配时，吐出一个 "b"，即在 "bb" 的基础 上，再继续尝试。如果还不行，再吐出一个，再试。如果还不行呢?只能说明匹配失败了。')]),t._v(" "),s("p",[t._v("虽然局部匹配是贪婪的，但也要满足整体能正确匹配。否则，皮之不存，毛将焉附?")]),t._v(" "),s("p",[t._v("此时我们不禁会问，如果当多个贪婪量词挨着存在，并相互有冲突时，此时会是怎样?")]),t._v(" "),s("p",[t._v("答案是，先下手为强!因为深度优先搜索。测试如下:")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{1,3})(\\d{1,3})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["12345", "123", "45", index: 0, input: "12345", groups: undefined]')]),t._v("\n")])])]),s("h3",{attrs:{id:"惰性量词"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#惰性量词"}},[t._v("#")]),t._v(" 惰性量词")]),t._v(" "),s("p",[t._v("惰性量词就是在贪婪量词后面加个问号。表示尽可能少的匹配，比如:")]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"12345"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d{1,3}?)(\\d{1,3})")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["1234", "1", "234", index: 0, input: "12345", groups: undefined]')]),t._v("\n")])])]),s("p",[t._v("惰性匹配也会存在回溯现象：正则 "),s("code",[t._v("/^\\d{1,3}?\\d{1,3}$/")]),t._v(',目标字符串 "12345"')]),t._v(" "),s("div",{staticClass:"language-javascript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^\\d{1,3}?\\d{1,3}$")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123456"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("匹配过程：")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/WX20210609-153414@2x.png")}}),t._v(" "),s("h3",{attrs:{id:"分支结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支结构"}},[t._v("#")]),t._v(" 分支结构")]),t._v(" "),s("p",[t._v('我们知道分支也是惰性的，比如 /can|candy/，去匹配字符串 "candy"，得到的结果是 "can"，因为分支会\n一个一个尝试，如果前面的满足了，后面就不会再试验了。')]),t._v(" "),s("p",[t._v("分支结构，可能前面的子模式会形成了局部匹配，如果接下来表达式整体不匹配时，仍会继续尝试剩下的分\n支。这种尝试也可以看成一种回溯。")]),t._v(" "),s("p",[t._v("举例：正则"),s("code",[t._v("/^(?:can|candy)$/")]),t._v(',目标字符串: "candy"')]),t._v(" "),s("p",[t._v("匹配过程：")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/WX20210609-153930@2x.png")}}),t._v(" "),s("p",[t._v("上面第 5 步，虽然没有回到之前的状态，但仍然回到了分支结构，尝试下一种可能。所以，可以认为它是 一种回溯的。")]),t._v(" "),s("h2",{attrs:{id:"小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[t._v("#")]),t._v(" 小结")]),t._v(" "),s("p",[t._v("简单总结就是，正因为有多种可能，所以要一个一个试。直到，要么到某一步时，整体匹配成功了;要么最后都试完后，发现整体匹配不成功。")])])}),[],!1,null,null,null);a.default=r.exports}}]);
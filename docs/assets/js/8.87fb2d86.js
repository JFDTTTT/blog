(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{363:function(t,a,s){"use strict";s.r(a);var e=s(45),v=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"基础"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础"}},[t._v("#")]),t._v(" 基础")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("所有的版本控制系统，其实只能跟踪文本文件的改动，比如 TXT 文件，网页，所有的程序代码等等，Git 也不例外。版本控制系统可以告诉你每次的改动，比如在第 5 行加了一个单词“Linux”，在第 8 行删了一个单词“Windows”。而图片、视频这些二进制文件，虽然也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是只知道图片从 100KB 改成了 120KB，但到底改了啥，版本控制系统不知道，也没法知道。")]),t._v(" "),s("p",[t._v("不幸的是，Microsoft 的 Word 格式是二进制格式，因此，版本控制系统是没法跟踪 Word 文件的改动的，前面我们举的例子只是为了演示，如果要真正使用版本控制系统，就要以纯文本方式编写文件")])]),t._v(" "),s("h2",{attrs:{id:"集中式-vs-分布式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#集中式-vs-分布式"}},[t._v("#")]),t._v(" 集中式 vs 分布式")]),t._v(" "),s("p",[t._v("集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。中央服务器就好比是一个图书馆，你要改一本书，必须先从图书馆借出来，然后回到家自己改，改完了，再放回图书馆。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/git/jizhongshi.jpeg")}}),t._v(" "),s("p",[t._v("分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？比方说你在自己电脑上改了文件 A，你的同事也在他的电脑上改了文件 A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/git/fenbushi.jpeg")}}),t._v(" "),s("h2",{attrs:{id:"创建版本库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建版本库"}},[t._v("#")]),t._v(" 创建版本库")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n")])])]),s("h3",{attrs:{id:"把文件添加到版本库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#把文件添加到版本库"}},[t._v("#")]),t._v(" 把文件添加到版本库")]),t._v(" "),s("p",[t._v("创建一个"),s("code",[t._v("readme.txt")]),t._v("文件，内容如下：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Git is a version control system.\nGit is free software.\n")])])]),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("➜  git-test git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("vim")]),t._v(" readme.txt\n➜  git-test git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" readme.txt\n➜  git-test git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ✗ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wrote a readme file.txt '")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("master（根提交） d05e107"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" wrote a readme file.txt\n "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" changed, "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" insertions"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("+"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n create mode "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100644")]),t._v(" readme.txt\n")])])]),s("p",[t._v("git commit 命令执行成功后会告诉你，"),s("code",[t._v("1 file changed")]),t._v("：1 个文件被改动（我们新添加的 readme.txt 文件）；"),s("code",[t._v("2 insertions")]),t._v("：插入了两行内容（readme.txt 有两行内容）。")]),t._v(" "),s("h2",{attrs:{id:"版本管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本管理"}},[t._v("#")]),t._v(" 版本管理")]),t._v(" "),s("p",[t._v("修改 "),s("code",[t._v("readme.txt")]),t._v(":")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Git is a distributed version control system.\nGit is free software.\n")])])]),s("p",[t._v("执行"),s("code",[t._v("git status")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("位于分支 master\n尚未暂存以备提交的变更：\n  （使用 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add <文件>..."')]),t._v(" 更新要提交的内容）\n  （使用 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git restore <文件>..."')]),t._v(" 丢弃工作区的改动）\n\t修改：     readme.txt\n\n修改尚未加入提交（使用 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git add"')]),t._v(" 和/或 "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git commit -a"')]),t._v("）\n")])])]),s("p",[t._v("执行"),s("code",[t._v("git diff")]),t._v("，查看修改内容")]),t._v(" "),s("div",{staticClass:"language-base extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("diff --git a/readme.txt b/readme.txt\nindex 46d49bf..9247db6 100644\n--- a/readme.txt\n+++ b/readme.txt\n@@ -1,2 +1,2 @@\n-Git is a version control system.\n+Git is a distributed version control system.\n Git is free software.\n")])])]),s("p",[t._v("小结："),s("br"),t._v(" "),s("code",[t._v("git status")]),t._v(": 当前工作区状态"),s("br"),t._v(" "),s("code",[t._v("git diff")]),t._v(": 对比修改内容")]),t._v(" "),s("h3",{attrs:{id:"版本回退"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本回退"}},[t._v("#")]),t._v(" 版本回退")]),t._v(" "),s("p",[s("code",[t._v("git log")]),t._v(":查看提交记录")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("commit 480dba96d8cf031bb008c0531486649239b9bc44 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nAuthor: jiangfeng "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("lucyjiangfeng@didiglobal.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Tue Jun "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(":01:42 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v(" +0800\n\n    append GPL\n\ncommit 83db940f9092b8a642624d705e71483112a4fdad\nAuthor: jiangfeng "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("lucyjiangfeng@didiglobal.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Tue Jun "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("15")]),t._v(":00:36 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v(" +0800\n\n    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\n\ncommit d05e107a434ab5b6aa0f5a2a53cc0ace2e30cca1\nAuthor: jiangfeng "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("lucyjiangfeng@didiglobal.com"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nDate:   Tue Jun "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("29")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("14")]),t._v(":48:42 "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2021")]),t._v(" +0800\n\n    wrote a readme file.txt\n")])])]),s("p",[s("code",[t._v("--pretty=oneline")]),t._v(" 可以查看简介")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("➜  git-test git:"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log --pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("oneline\n480dba96d8cf031bb008c0531486649239b9bc44 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" append GPL\n83db940f9092b8a642624d705e71483112a4fdad "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\nd05e107a434ab5b6aa0f5a2a53cc0ace2e30cca1 wrote a readme file.txt\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("在 Git 中，用"),s("code",[t._v("HEAD")]),t._v("表示当前版本，也就是最新的提交 1094adb...（注意我的提交 ID 和你的肯定不一样），上一个版本就是"),s("code",[t._v("HEAD^")]),t._v("，上上一个版本就是"),s("code",[t._v("HEAD^^")]),t._v("，当然往上 100 个版本写 100 个^比较容易数不过来，所以写成"),s("code",[t._v("HEAD~100")])])]),t._v(" "),s("p",[t._v("回退到上一个版本"),s("code",[t._v("git reset --hard HEAD^")])]),t._v(" "),s("p",[t._v("如果回退之后再想回到最新的版本，可以记录下新版本的 "),s("code",[t._v("commit id")])]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard 480dba96d8cf031bb008c0531486649239b9bc44\n")])])]),s("p",[t._v("新版本的 commit id 找不到了怎么办？")]),t._v(" "),s("p",[s("code",[t._v("git reflog")]),t._v("用来记录你的每一次命令：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("480dba9 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": reset: moving to 480dba96d8cf031bb008c0531486649239b9bc44\n83db940 HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": reset: moving to HEAD^\n480dba9 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("HEAD -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": commit: append GPL\n83db940 HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": commit: "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("\nd05e107 HEAD@"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(": commit "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initial"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(": wrote a readme file.txt\n")])])]),s("p",[s("code",[t._v("480dba9 (HEAD -> master) HEAD@{2}: commit: append GPL")]),t._v(" 找到 "),s("code",[t._v("commit id")]),t._v("是 "),s("code",[t._v("480dba9")])]),t._v(" "),s("p",[t._v("小结：")]),t._v(" "),s("ul",[s("li",[t._v("HEAD 指向的版本就是当前版本，因此，Git 允许我们在版本的历史之间穿梭，使用命令"),s("code",[t._v("git reset --hard commit_id")])]),t._v(" "),s("li",[t._v("穿梭前，用"),s("code",[t._v("git log")]),t._v("可以查看提交历史，以便确定要回退到哪个版本。\n"),s("ul",[s("li",[s("code",[t._v("git log --graph")]),t._v(" 可以看到图形化的提交记录")])])]),t._v(" "),s("li",[t._v("要重返未来，用"),s("code",[t._v("git reflog")]),t._v("查看命令历史，以便确定要回到未来的哪个版本。")])]),t._v(" "),s("h3",{attrs:{id:"撤销修改"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撤销修改"}},[t._v("#")]),t._v(" 撤销修改")]),t._v(" "),s("p",[t._v("撤销修改有两种场景")]),t._v(" "),s("ol",[s("li",[t._v("当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 "),s("code",[t._v("git checkout -- file")])]),t._v(" "),s("li",[t._v("当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 "),s("code",[t._v("git reset HEAD <file>")]),t._v("，就回到了场景 1，第二步按场景 1 操作")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("git 2.23 版本新增了 switch、restore 命令，因为 git checkout 命令职责较多、不够明确，而 restore 命令则专门用来还原、撤销修改等")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("git restore --staged <文件>...")]),t._v(" 取消暂存")]),t._v(" "),s("li",[s("code",[t._v("git restore <文件>...")]),t._v(" 丢弃共工作区的改动")])])]),t._v(" "),s("h2",{attrs:{id:"远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#远程仓库"}},[t._v("#")]),t._v(" 远程仓库")]),t._v(" "),s("p",[t._v("要查看远程库的信息，用 "),s("code",[t._v("git remote")]),t._v("：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote\norigin\n\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" remote -v\norigin  git@github.com:michaelliao/learngit.git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\norigin  git@github.com:michaelliao/learngit.git "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("上面显示了可以抓取和推送的 origin 的地址。如果没有推送权限，就看不到 push 的地址。")]),t._v(" "),s("h3",{attrs:{id:"添加远程仓库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加远程仓库"}},[t._v("#")]),t._v(" 添加远程仓库")]),t._v(" "),s("ol",[s("li",[t._v("要关联一个远程库，使用命令 "),s("code",[t._v("git remote add origin git@server-name:path/repo-name.git")])]),t._v(" "),s("li",[t._v("关联一个远程库时必须给远程库指定一个名字，"),s("code",[t._v("origin")]),t._v(" 是默认习惯命名")]),t._v(" "),s("li",[t._v("关联后，使用命令"),s("code",[t._v("git push -u origin master")]),t._v("第一次推送 master 分支的所有内容；")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("由于远程库是空的，我们第一次推送 master 分支时，加上了-u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令。")])]),t._v(" "),s("h3",{attrs:{id:"删除远程库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除远程库"}},[t._v("#")]),t._v(" 删除远程库")]),t._v(" "),s("p",[t._v("如果添加的时候地址写错了，或者就是想删除远程库，可以用"),s("code",[t._v("git remote rm <name>")]),t._v("命令。使用前，建议先用"),s("code",[t._v("git remote -v")]),t._v("查看远程库信息：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git remote -v\norigin  git@github.com:michaelliao/learn-git.git (fetch)\norigin  git@github.com:michaelliao/learn-git.git (push)\n")])])]),s("p",[t._v("然后，根据名字删除，比如删除 "),s("code",[t._v("origin")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("$ git remote rm origin\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。要真正删除远程库，需要登录到 GitHub，在后台页面找到删除按钮再删除。")])]),t._v(" "),s("h3",{attrs:{id:"从远程仓库克隆"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#从远程仓库克隆"}},[t._v("#")]),t._v(" 从远程仓库克隆")]),t._v(" "),s("p",[t._v("要克隆一个仓库，首先必须知道仓库的地址，然后使用"),s("code",[t._v("git clone")]),t._v("命令克隆")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" clone https://github.com/JFDTTTT/learngit.git\n")])])]),s("h3",{attrs:{id:"抓取分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#抓取分支"}},[t._v("#")]),t._v(" 抓取分支")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("git checkout -b branch-name origin/branch-name")]),t._v(" 在本地创建和远程分支对应的分支(拉去远程分支到本地)")]),t._v(" "),s("li",[s("code",[t._v("git branch --set-upstream branch-name origin/branch-name")]),t._v(" 建立本地分支和远程分支的关联")])]),t._v(" "),s("h3",{attrs:{id:"推送分支"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推送分支"}},[t._v("#")]),t._v(" 推送分支")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("branch"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("h2",{attrs:{id:"分支管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),s("p",[t._v("你已经知道，每次提交，Git 都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在 Git 里，这个分支叫主分支，即"),s("code",[t._v("master")]),t._v("分支。"),s("code",[t._v("HEAD")]),t._v("严格来说不是指向提交，而是指向"),s("code",[t._v("master")]),t._v("，"),s("code",[t._v("master")]),t._v("才是指向提交的，所以，"),s("code",[t._v("HEAD")]),t._v("指向的就是当前分支。")]),t._v(" "),s("p",[t._v("一开始的时候，"),s("code",[t._v("master")]),t._v("分支是一条线，Git 用"),s("code",[t._v("master")]),t._v("指向最新的提交，再用"),s("code",[t._v("HEAD")]),t._v("指向"),s("code",[t._v("master")]),t._v("，就能确定当前分支，以及当前分支的提交点：")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/git/branch1.png")}}),t._v(" "),s("p",[t._v("每次提交，"),s("code",[t._v("master")]),t._v(" 分支都会向前移动一步，这样，随着你不断提交，"),s("code",[t._v("master")]),t._v(" 分支的线也越来越长。"),s("br"),t._v("\n当我们创建新的分支，例如 "),s("code",[t._v("dev")]),t._v(" 时，Git 新建了一个指针叫 "),s("code",[t._v("dev")]),t._v("，指向 "),s("code",[t._v("master")]),t._v(" 相同的提交，再把 "),s("code",[t._v("HEAD")]),t._v(" 指向 "),s("code",[t._v("dev")]),t._v("，就表示当前分支在 "),s("code",[t._v("dev")]),t._v(" 上：")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/git/branch2.png")}}),t._v(" "),s("p",[t._v("从现在开始，对工作区的修改和提交就是针对 "),s("code",[t._v("dev")]),t._v(" 分支了，比如新提交一次后，"),s("code",[t._v("dev")]),t._v(" 指针往前移动一步，而 "),s("code",[t._v("master")]),t._v(" 指针不变：")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/git/branch3.png")}}),t._v(" "),s("p",[t._v("假如我们在 "),s("code",[t._v("dev")]),t._v(" 上的工作完成了，就可以把 "),s("code",[t._v("dev")]),t._v(" 合并到 "),s("code",[t._v("master")]),t._v(" 上。Git 怎么合并呢？最简单的方法，就是直接把 "),s("code",[t._v("master")]),t._v(" 指向 "),s("code",[t._v("dev")]),t._v(" 的当前提交，就完成了合并：")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/git/branch4.png")}}),t._v(" "),s("p",[t._v("合并完分支后，甚至可以删除 "),s("code",[t._v("dev")]),t._v(" 分支。删除 "),s("code",[t._v("dev")]),t._v(" 分支就是把 "),s("code",[t._v("dev")]),t._v(" 指针给删掉，删掉后，我们就剩下了一条 "),s("code",[t._v("master")]),t._v(" 分支：")]),t._v(" "),s("img",{attrs:{src:t.$withBase("/img/git/branch5.png")}}),t._v(" "),s("h3",{attrs:{id:"创建与分支合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建与分支合并"}},[t._v("#")]),t._v(" 创建与分支合并")]),t._v(" "),s("ul",[s("li",[t._v("查看分支："),s("code",[t._v("git branch")])]),t._v(" "),s("li",[t._v("创建分支："),s("code",[t._v("git branch <name>")])]),t._v(" "),s("li",[t._v("切换分支："),s("code",[t._v("git checkout <name>")]),t._v("或者"),s("code",[t._v("git switch <name>")])]),t._v(" "),s("li",[t._v("创建+切换分支："),s("code",[t._v("git checkout -b <name>")]),t._v("或者"),s("code",[t._v("git switch -c <name>")])]),t._v(" "),s("li",[t._v("合并某分支到当前分支："),s("code",[t._v("git merge <name>")])]),t._v(" "),s("li",[t._v("删除分支："),s("code",[t._v("git branch -d <name>")]),t._v(" （-D）强制删除")])]),t._v(" "),s("h3",{attrs:{id:"暂存"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暂存"}},[t._v("#")]),t._v(" 暂存")]),t._v(" "),s("ul",[s("li",[s("code",[t._v('git stash save "save message"')]),t._v(" : 执行存储时，添加备注，方便查找，只有 "),s("code",[t._v("git stash")]),t._v(" 也要可以的，但查找时不方便识别。")]),t._v(" "),s("li",[s("code",[t._v("git stash list")]),t._v(" ：查看 stash 了哪些存储")]),t._v(" "),s("li",[s("code",[t._v("git stash apply")]),t._v(" :应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即 stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1}")]),t._v(" "),s("li",[s("code",[t._v("git stash pop")]),t._v(" ：命令恢复之前缓存的工作目录，将缓存堆栈中的对应 stash 删除，并将对应修改应用到当前的工作目录下,默认为第一个 stash,即 stash@{0}，如果要应用并删除其他 stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1}")]),t._v(" "),s("li",[s("code",[t._v("git stash drop")]),t._v(" stash@{$num} ：丢弃stash@{$num}存储，从列表中删除这个存储")]),t._v(" "),s("li",[s("code",[t._v("git stash clear")]),t._v(" ：删除所有缓存的 stash")])]),t._v(" "),s("h3",{attrs:{id:"复制-commit"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#复制-commit"}},[t._v("#")]),t._v(" 复制 commit")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" cherry-pick 4c805e2\n")])])]),s("h2",{attrs:{id:"标签管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标签管理"}},[t._v("#")]),t._v(" 标签管理")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("标签总是和某个 commit 挂钩。如果这个 commit 既出现在 master 分支，又出现在 dev 分支，那么在这两个分支上都可以看到这个标签。")])]),t._v(" "),s("ul",[s("li",[t._v("命令"),s("code",[t._v("git tag <tagname> <commitId>")]),t._v(" 用于新建一个标签，默认为 HEAD，也可以指定一个 commit id；")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v('git tag -a <tagname> -m "blablabla..."')]),t._v("可以指定标签信息；")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git tag")]),t._v("可以查看所有标签。")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git show v1.0")]),t._v(" 查看 tag 详情")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git push origin <tagname>")]),t._v("可以推送一个本地标签；")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git push origin --tags")]),t._v("可以推送全部未推送过的本地标签；")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git tag -d <tagname>")]),t._v("可以删除一个本地标签；")]),t._v(" "),s("li",[t._v("命令"),s("code",[t._v("git push origin :refs/tags/<tagname>")]),t._v("可以删除一个远程标签。")])])])}),[],!1,null,null,null);a.default=v.exports}}]);